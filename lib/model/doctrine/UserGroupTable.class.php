<?php

/**
 * UserGroupTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class UserGroupTable extends Doctrine_Table{
  const GROUP_RECORD_LIMIT = 25;  
  public static function getInstance(){
    return Doctrine_Core::getTable('UserGroup');
  }
  
  public function addGroup($post){
    $group = new UserGroup;
    $group->setName(strip_tags($post['name']));
    $group->setUserId($post['user_id']);
    $group->setCaption(strip_tags($post['caption']));
    $group->setKeywords(strip_tags($post['keywords']));
    $group->setFish(strip_tags($post['fish']));
    $group->setDateCreate(new Doctrine_Expression('NOW()'));
    $group->setWebsite(strip_tags($post['website']));
    $group->setLocation(strip_tags($post['location']));
    $group->setAbout(strip_tags($post['about']));
    $group->setGtype(intval($post['gtype']));
    if($post['geo']){
      $group->setLat(floatval($post['geo']['lat']));
      $group->setLon(floatval($post['geo']['lon']));
    }
    $group->setSec(intval($post['sec']));
    $group->save();
    $group_id = $group->getId();
    return $this->groupById($group_id);
  }
  
  public function editGroup($post){
    if($group = $this->find($post['id'])){
      $group->setCaption(strip_tags($post['caption']));
      $group->setKeywords(strip_tags($post['keywords']));
      $group->setFish(strip_tags($post['fish']));
      $val = trim(strip_tags($post['website']));
      $group->setWebsite($val);
      $val = trim(strip_tags($post['location']));
      $group->setLocation($val);
      $val = trim(strip_tags($post['about']));
      $group->setAbout($val);
      $group->setGtype(intval($post['gtype']));
      $group->setSec(intval($post['sec']));
      $group->save();
      return $this->groupById($group['id']);
    }
    return False;
  }

  public function editGeo($post){
    if($group = $this->find($post['id'])){
      $geo = $post['geo'];
      if($geo and $geo['lat'] and $geo['lon']){
	$group->setLat(floatval($geo['lat']));
	$group->setLon(floatval($geo['lon']));
	$group->save();
      }
      return True;
    }
    return False;
  }

  public function deleteGroup($group_id){
    if($group = $this->find($group_id)){
      $group->setFbdelete(999);
      $group->save();
      return True;
    }
    return False;
  }

  public function editGroupPhoto($post){
    if($group = $this->find($post['id'])){
      if($post['photo_id']){
	$group->setPhotoId(intval($post['photo_id']));
	$group->save();
	return True;
      }
    }
    return False;
  }

  public function groupByName($name){
    $user_id = fbLib::getUserId();
    $q = Doctrine_Query::create()
      ->select($this->sqlSelect())
      ->from('UserGroup g')
      ->innerJoin('g.User u')
      ->leftJoin('g.UserGroupType gt')
      ->where('g.name = ?', $name)
      ->andWhere('g.fbdelete != ?',999);
    $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
    $fish = new fbGroupFish();
    if($rows and (count($rows) > 0) ){
      $rec = $this->sqlRow($rows[0]);
      $rec['fish_count'] = $fish->fishCount($rec['id']);
      $rec['member_status'] = $this->memberStatus($rec['id'],$user_id);
      return $rec;
    }
    return False;
  }
  
  public function getOwnerId($group_id){
    $q = Doctrine_Query::create()
      ->select('g.user_id')
      ->from('UserGroup g')
      ->where('g.id = ?', $group_id)
      ->andWhere('g.fbdelete != ?',999);
    $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
    if($rows and (count($rows) > 0) ){
      return $rows[0]['g_user_id'];
    }
    return False;
  }

  public function getRec($group_id){
    return $this->groupById($group_id);
  }

  public function groupById($group_id){
    $user_id = fbLib::getUserId();
    $q = Doctrine_Query::create()
      ->select($this->sqlSelect())
      ->from('UserGroup g')
      ->innerJoin('g.User u')
      ->leftJoin('g.UserGroupType gt')
      ->where('g.id = ?', $group_id)
      ->andWhere('g.fbdelete != ?',999);
    $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
    $fish = new fbGroupFish();
    if($rows and (count($rows) > 0) ){
      $rec = $this->sqlRow($rows[0]);
      $rec['fish_count'] = $fish->fishCount($rec['id']);
      $rec['member_status'] = $this->memberStatus($rec['id'],$user_id);
      return $rec;
    }
    return False;
  }
  
  private function sqlSelect(){
    $sql = 'u.username,g.id,g.name,g.caption,g.keywords,g.fish,g.sec,UNIX_TIMESTAMP(g.date_create) AS uts,DATE_FORMAT(g.date_create,\'%c/%e/%y\') AS date_create,DATE_FORMAT(g.date_create,\'%c/%e/%Y @ %r\') AS date_time,g.gtype,g.website,g.location,g.about,g.lat,g.lon,g.photo_id,gt.description';
    return $sql;
  }
  
  private function sqlRow($row){
    $rec = array();
    $rec['id'] = intval($row['g_id']);
    $rec['name'] = $row['g_name'];
    $rec['caption'] = $row['g_caption'];
    $rec['keywords'] = $row['g_keywords'];
    $rec['fish'] = $row['g_fish'];
    $rec['date_create'] = $row['g_date_create'];
    $rec['date'] = $row['g_date_create'];
    $rec['date_time'] = $row['g_date_time'];
    $rec['uts'] = $row['g_uts'];
    $rec['website'] = $row['g_website'];
    $rec['location'] = $row['g_location'];
    $rec['gtype'] = intval($row['g_gtype']);
    $rec['gtype_text'] = $row['gt_description'];
    $rec['about'] = $row['g_about'];
    $rec['content'] = $row['g_about'];
    $rec['lat'] = floatval($row['g_lat']);
    $rec['lon'] = floatval($row['g_lon']);
    $rec['sec'] = intval($row['g_sec']);
    $rec['photo_id'] = intval($row['g_photo_id']);
    $rec['username'] = $row['u_username'];
    $rec['is_member'] = (  preg_match("/^(admin|member|owner)$/",$rec['member_status']) ? True : False);
    $rec['is_admin'] = (  preg_match("/^(admin|owner)$/",$rec['member_status']) ? True : False);
    return $rec;
  }

  public function getGroupsBBCount(){
    $q = Doctrine_Query::create()
      ->select('COUNT(*) AS group_count')
      ->from('UserGroup g')
      ->innerJoin('g.User u')
      ->where('g.fbdelete != ?',999);
    fbLib::addBoundsSQL($q,'g');
    fbLib::addFishSQL($q, array('source'=>'g', 'fish_table'=>'FishForGroup', 'fish_table_alias'=>'ffa'));
    $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
    return intval($rows[0]['g_group_count']);
  }

  public function getGroupsBB($offset = 0){
    $recs = array();
    $count = $this->getGroupsBBCount();
    $ret = array('count_total' => $count, 'count' => 0, 'records' => $recs,
		 'record_limit' => UserGroupTable::GROUP_RECORD_LIMIT);
    $q = Doctrine_Query::create()
      ->select($this->sqlSelect())
      ->from('UserGroup g')
      ->innerJoin('g.User u')
      ->leftJoin('g.UserGroupType gt')
      ->where('g.fbdelete != ?',999)
      ->orderBy('g.date_create DESC')
      ->limit(UserGroupTable::GROUP_RECORD_LIMIT);
    fbLib::addBoundsSQL($q,'g');
    fbLib::addFishSQL($q, array('source'=>'g', 'fish_table'=>'FishForGroup', 'fish_table_alias'=>'ffa'));
    if($offset > 0){
      $q->offset($offset * UserGroupTable::GROUP_RECORD_LIMIT);
    }
    $user_id = fbLib::getUserId();
    $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
    $fish = new fbGroupFish();
    if(count($rows) > 0 ){
      foreach($rows as $i => $row){
	$rec = $this->sqlRow($rows[$i]);
	$rec['fish_count'] = $fish->fishCount($rec['id']);
	$rec['member_status'] = $this->memberStatus($rec['id'],$user_id);
	$recs[] = $rec;
      }
      $ret['count'] = count($recs);
      $ret['records'] = $recs;
    }
    return $ret;
  }
   
  public function getGroupsBBGWCount(){
    $q = Doctrine_Query::create()
      ->select('COUNT(*) AS group_count')
      ->from('UserGroup g')
      ->innerJoin('g.User u')
      ->where('g.fbdelete != ?',999);
    fbLib::addBoundsSQL($q,'g');
    $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
    return intval($rows[0]['g_group_count']);
  }
  
  public function getGroupsBBGW($p){
    if( ! $p['limit']){
      $p['limit'] = UserGroupTable::GROUP_RECORD_LIMIT;
    }
    if( ! $p['offset']){
      $p['offset'] = 0;
    }
    $recs = array();
    $count = $this->getGroupsBBCount();
    $ret = array('count_total' => $count, 'count' => 0, 'records' => $recs,
		 'record_offset' => $p['offset'], 'record_limit' => $p['limit']);
    $q = Doctrine_Query::create()
      ->select($this->sqlSelect())
      ->from('UserGroup g')
      ->innerJoin('g.User u')
      ->leftJoin('g.UserGroupType gt')
      ->where('g.fbdelete != ?',999)
      ->orderBy('g.date_create DESC');
    fbLib::addBoundsSQL($q,'g');
    if($p['offset'] > 0){
      $q->limit( (1 + $p['offset']) * $p['limit']);
    }else{
      $q->limit($p['limit']);
    }
    $user_id = fbLib::getUserId();
    $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
    $fish = new fbGroupFish();
    if(count($rows) > 0 ){
      foreach($rows as $i => $row){
	$rec = $this->sqlRow($rows[$i]);
	$rec['fish_count'] = $fish->fishCount($rec['id']);
	$rec['member_status'] = $this->memberStatus($rec['id'],$user_id);
	$recs[] = $rec;
      }
      $ret['count'] = count($recs);
      $ret['records'] = $recs;
    }
    return $ret;
  }

  public function groupByIdGW($group_id){
    $user_id = fbLib::getUserId();
    $q = Doctrine_Query::create()
      ->select($this->sqlSelect())
      ->from('UserGroup g')
      ->innerJoin('g.User u')
      ->leftJoin('g.UserGroupType gt')
      ->where('g.id = ?', $group_id)
      ->andWhere('g.fbdelete != ?',999);
    $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
    $fish = new fbGroupFish();
    $p = array('limit' => 10, 'offset' => 0);
    if($rows and (count($rows) > 0) ){
      $rec = $this->sqlRow($rows[0]);
      $p['group_id'] = $rec['id'];
      $rec['fish_count'] = $fish->fishCount($rec['id']);
      $rec['member_status'] = $this->memberStatus($rec['id'],$user_id);
      $rec['blogs'] = Doctrine_Core::getTable('Blog')->blogsByGroupId($p);
      $rec['photos'] = Doctrine_Core::getTable('File')->photosByGroupId($p);
      $rec['reports'] = Doctrine_Core::getTable('Report')->reportsByGroupId($p);
      $rec['spots'] = Doctrine_Core::getTable('Spot')->spotsByGroupId($p);
      $rec['discs'] = Doctrine_Core::getTable('Disc')->discsByGroupId($p);
      $rec['users'] = Doctrine_Core::getTable('UserForGroup')->getMembers($p['group_id']);
      return $rec;
    }
    return False;
  }
  
  public function groupsByFishIdCount($fish_id){
    $q = Doctrine_Query::create()
      ->select('COUNT(*) AS group_count')
      ->from('UserGroup g')
      ->innerJoin('g.User u')
      ->innerJoin('g.FishForGroup ffg')
      ->where('g.fbdelete != ?',999)
      ->andWhere('ffg.fish_id = ?',$fish_id);
    $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
    return intval($rows[0]['g_group_count']);
  }
  
  public function groupsByFishId($p){
    $fish_id = $p['fish_id'];
    if( ! $p['limit']){
      $p['limit'] = UserGroupTable::GROUP_RECORD_LIMIT;
    }
    if( ! $p['offset']){
      $p['offset'] = 0;
    }
    $recs = array();
    $count = $this->groupsByFishIdCount($fish_id);
    $ret = array('count_total' => $count, 'count' => 0, 'records' => $recs,
		 'record_offset' => $p['offset'], 'record_limit' => $p['limit']);
    $q = Doctrine_Query::create()
      ->select($this->sqlSelect())
      ->from('UserGroup g')
      ->innerJoin('g.User u')
      ->innerJoin('g.FishForGroup ffg')  
      ->leftJoin('g.UserGroupType gt')
      ->where('g.fbdelete != ?',999)
      ->andWhere('ffg.fish_id = ?',$fish_id)
      ->orderBy('g.date_create DESC');
    if($p['offset'] > 0){
      $q->limit( (1 + $p['offset']) * $p['limit']);
    }else{
      $q->limit($p['limit']);
    }
    $user_id = fbLib::getUserId();
    $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
    if(count($rows) > 0 ){
      foreach($rows as $i => $row){
	$rec = $this->sqlRow($rows[$i]);
	$rec['fish_count'] = $fish->fishCount($rec['id']);
	$rec['member_status'] = $this->memberStatus($rec['id'],$user_id);
	$recs[] = $rec;
      }
      $ret['count'] = count($recs);
      $ret['records'] = $recs;
    }
    return $ret;
  }
  
  public function groupByNameLike($name){
    $q = Doctrine_Query::create()
      ->select('g.name')
      ->from('UserGroup g')
      ->innerJoin('g.User u')
      ->where('g.name LIKE ?', '%' . $name . '%')
      ->andWhere('g.fbdelete != ?',999)
      ->orderBy('g.name');
    $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
    $recs = array();
    if(count($rows) > 0 ){
      foreach($rows as $i => $row){
	$recs[$i]['name'] = $row['g_name'];
	$recs[$i]['label'] = $row['g_name'];
	$recs[$i]['id'] = $row['g_name'];
      }
    }
    return $recs;
  }
  
  public function memberStatus($group_id,$user_id){
    $status = 'none';
    if($group_id and $user_id){
      $owner_id = $this->getOwnerId($group_id);
      if( $owner_id and ($owner_id == $user_id) ){
	$status = 'owner';	
      }else{
	$member = Doctrine_Core::getTable('UserForGroup')->memberStatus($group_id,$user_id);
	if($user_id and $group_id){
	  if($member = Doctrine_Core::getTable('UserForGroup')->memberStatus($group_id,$user_id)){
	    if($member['sec'] > 49){
	      $status = 'admin';
	    }else{
	      $status = 'member';
	    }
	  }else{
	    if(Doctrine_Core::getTable('UserForGroupBlock')->get($group_id,$user_id)){
	      $status = 'blocked';
	    }elseif(Doctrine_Core::getTable('UserForGroupInvite')->get($group_id,$user_id)){
	      $status = 'invite';
	    }elseif(Doctrine_Core::getTable('UserForGroupReq')->get($group_id,$user_id)){
	      $status = 'request';
	    }
	  }
	}
      }
    }
    return $status;
  }
 
  public function groupsByUserIdCount($user_id){
    $q = Doctrine_Query::create()
      ->select('COUNT(*) AS group_count')
      ->from('UserGroup g')
      ->innerJoin('g.User u')
      ->innerJoin('g.UserForGroup ufg')
      ->where('ufg.user_id = ?',$user_id)
      ->andWhere('g.fbdelete != ?',999);
    fbLib::addBoundsSQL($q,'g');
    $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
    return intval($rows[0]['g_group_count']);
  }
  
  public function groupsByUserId($user_id){
    $recs = array();
    $count = $this->groupsByUserIdCount($user_id);
    $ret = array('count_total' => $count, 'count' => 0, 'records' => $recs,
		 'record_limit' => UserGroupTable::GROUP_RECORD_LIMIT);
    $q = Doctrine_Query::create()
      ->select($this->sqlSelect())
      ->from('UserGroup g')
      ->innerJoin('g.User u')
      ->innerJoin('g.UserForGroup ufg')
      ->leftJoin('g.UserGroupType gt')
      ->where('ufg.user_id = ?',$user_id)
      ->andWhere('g.fbdelete != ?',999)
      ->orderBy('g.date_create DESC')
      ->limit(UserGroupTable::GROUP_RECORD_LIMIT);
    $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
    $fish = new fbGroupFish();
    if(count($rows) > 0 ){
      foreach($rows as $i => $row){
	$rec = $this->sqlRow($rows[$i]);
	$rec['fish_count'] = $fish->fishCount($rec['id']);
	$rec['member_status'] = $this->memberStatus($rec['id'],$user_id);
	$recs[] = $rec;
      }
      $ret['count'] = count($recs);
      $ret['records'] = $recs;
    }
    return $ret;
  }

  public function groupsByUserIdShort($user_id){
    if( ! $user_id){
      return False;
    }
    $recs = array();
    $count = $this->groupsByUserIdCount($user_id);
    $ret = array('count_total' => $count, 'count' => 0, 'records' => $recs,
		 'record_limit' => UserGroupTable::GROUP_RECORD_LIMIT);
    $q = Doctrine_Query::create()
      ->select($this->sqlSelect())
      ->from('UserGroup g')
      ->innerJoin('g.User u')
      ->innerJoin('g.UserForGroup ufg')
      ->leftJoin('g.UserGroupType gt')
      ->where('ufg.user_id = ?',$user_id)
      ->andWhere('g.fbdelete != ?',999)
      ->orderBy('g.date_create DESC');
    $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
    if(count($rows) > 0 ){
      foreach($rows as $i => $row){
	$group_id = intval($row['g_id']);
	$recs[$i]['id'] = $group_id;
	$recs[$i]['name'] = $row['g_name'];
	$recs[$i]['caption'] = $row['g_caption'];
      }
      $ret['count'] = count($recs);
      $ret['records'] = $recs;
    }
    return $ret;
  }

  public function groupRequestsCount($user_id){
    $q = Doctrine_Query::create()
      ->select('COUNT(*) AS group_count')
      ->from('UserGroup g')
      ->innerJoin('g.User u')
      ->innerJoin('g.UserForGroupReq ufg')
      ->where('ufg.user_id = ?',$user_id)
      ->andWhere('g.fbdelete != ?',999);
    fbLib::addBoundsSQL($q,'g');
    $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
    return intval($rows[0]['g_group_count']);
  }

  public function groupRequests($user_id){
    $recs = array();
    $count = $this->groupRequestsCount($user_id);
    $ret = array('count_total' => $count, 'count' => 0, 'records' => $recs,
		 'record_limit' => UserGroupTable::GROUP_RECORD_LIMIT);
    $q = Doctrine_Query::create()
      ->select($this->sqlSelect())
      ->from('UserGroup g')
      ->innerJoin('g.User u')
      ->innerJoin('g.UserForGroupReq ufg')
      ->leftJoin('g.UserGroupType gt')
      ->where('ufg.user_id = ?',$user_id)
      ->andWhere('g.fbdelete != ?',999)
      ->orderBy('g.date_create DESC');
    $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
    $fish = new fbGroupFish();
    if(count($rows) > 0 ){
      foreach($rows as $i => $row){
	$rec = $this->sqlRow($rows[$i]);
	$rec['fish_count'] = $fish->fishCount($rec['id']);
	$rec['member_status'] = $this->memberStatus($rec['id'],$user_id);
	$recs[] = $rec;
      }
      $ret['count'] = count($recs);
      $ret['records'] = $recs;
    }
    return $recs;
  }
  
  public function groupSearchCount($param){
    $q = Doctrine_Query::create()
      ->select('COUNT(*) AS group_count')
      ->from('UserGroup g')
      ->innerJoin('g.User u')
      ->where('g.fbdelete != ?',999);
    fbLib::addBoundsSQL($q,'g');
    fbLib::addSearchSQL($q,$param);
    fbLib::addFishSQL($q, array('source'=>'g', 'fish_table'=>'FishForGroup', 'fish_table_alias'=>'ffa'));
    $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
    return intval($rows[0]['g_group_count']);
  }

  public function groupSearch($param,$offset = 0){
    $recs = array();
    $count = $this->groupSearchCount($param);
    $ret = array('count_total' => $count, 'count' => 0, 'records' => $recs,
		 'record_limit' => UserGroupTable::GROUP_RECORD_LIMIT);
    $q = Doctrine_Query::create()
      ->select($this->sqlSelect())
      ->from('UserGroup g')
      ->innerJoin('g.User u')
      ->leftJoin('g.UserGroupType gt')
      ->where('g.fbdelete != ?',999)
      ->orderBy('g.date_create DESC')
      ->limit(UserGroupTable::GROUP_RECORD_LIMIT);
    fbLib::addBoundsSQL($q,'g');
    fbLib::addSearchSQL($q,$param);
    fbLib::addFishSQL($q, array('source'=>'g', 'fish_table'=>'FishForGroup', 'fish_table_alias'=>'ffa'));
    if($offset > 0){
      $q->offset($offset * UserGroupTable::GROUP_RECORD_LIMIT);
    }
    $user_id = fbLib::getUserId();
    $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
    $fish = new fbGroupFish();
    if(count($rows) > 0 ){
      foreach($rows as $i => $row){
	$rec = $this->sqlRow($rows[$i]);
	$rec['fish_count'] = $fish->fishCount($rec['id']);
	$rec['member_status'] = $this->memberStatus($rec['id'],$user_id);
	$recs[] = $rec;
      }
      $ret['count'] = count($recs);
      $ret['records'] = $recs;
    }
    return $ret;
  }   
  
  public function getGroupsCount(){
    $q = Doctrine_Query::create()
      ->select('COUNT(*) AS group_count')
      ->from('UserGroup g')
      ->innerJoin('g.User u')
      ->where('g.fbdelete != ?',999);
    $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
    return intval($rows[0]['g_group_count']);
  }

  public function getGroups($offset = 0){
    $recs = array();
    $count = $this->getGroupsCount();
    $ret = array('count_total' => $count, 'count' => 0, 'records' => $recs,
		 'record_limit' => UserGroupTable::GROUP_RECORD_LIMIT);
    $q = Doctrine_Query::create()
      ->select($this->sqlSelect())
      ->from('UserGroup g')
      ->innerJoin('g.User u')
      ->leftJoin('g.UserGroupType gt')
      ->where('g.fbdelete != ?',999)
      ->orderBy('g.date_create DESC')
      ->limit(UserGroupTable::GROUP_RECORD_LIMIT);
    if($offset > 0){
      $q->offset($offset * UserGroupTable::GROUP_RECORD_LIMIT);
    }
    $user_id = fbLib::getUserId();
    $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
    $fish = new fbGroupFish();
    if(count($rows) > 0 ){
      foreach($rows as $i => $row){
	$rec = $this->sqlRow($rows[$i]);
	$rec['fish_count'] = $fish->fishCount($rec['id']);
	$rec['member_status'] = $this->memberStatus($rec['id'],$user_id);
	$recs[] = $rec;
      }
      $ret['count'] = count($recs);
      $ret['records'] = $recs;
    }
    return $ret;
  }
   
}