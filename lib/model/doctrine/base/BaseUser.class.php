<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('User', 'doctrine-discuss');

/**
 * BaseUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $username
 * @property string $email
 * @property string $password
 * @property string $firstname
 * @property string $lastname
 * @property string $title
 * @property string $about
 * @property string $options
 * @property decimal $lat
 * @property decimal $lon
 * @property timestamp $date_create
 * @property timestamp $ts
 * @property integer $utype
 * @property string $website
 * @property integer $msg_disc
 * @property integer $msg_reply
 * @property integer $msg_update
 * @property integer $msg_stop
 * @property integer $photo_id
 * @property string $location
 * @property integer $fb_status
 * @property string $company
 * @property string $phone
 * @property integer $active
 * @property UserType $UserType
 * @property UserNotify $UserNotify
 * @property UserForGroup $UserForGroup
 * @property UserForGroupReq $UserForGroupReq
 * @property UserForGroupBlock $UserForGroupBlock
 * @property UserForFriend $UserForFriend
 * @property UserForFriendReq $UserForFriendReq
 * @property UserForFriendBlock $UserForFriendBlock
 * @property FishForUser $FishForUser
 * @property Doctrine_Collection $Disc
 * @property Doctrine_Collection $DiscReply
 * @property Doctrine_Collection $Report
 * @property Doctrine_Collection $ReportReply
 * @property Doctrine_Collection $Blog
 * @property Doctrine_Collection $BlogReply
 * @property Doctrine_Collection $Spot
 * @property Doctrine_Collection $SpotReply
 * @property Doctrine_Collection $File
 * @property Doctrine_Collection $FileReply
 * @property Doctrine_Collection $UserGroup
 * @property Doctrine_Collection $Fish
 * @property Doctrine_Collection $Promo
 * @property Doctrine_Collection $PromoSent
 * 
 * @method integer             getId()                 Returns the current record's "id" value
 * @method string              getUsername()           Returns the current record's "username" value
 * @method string              getEmail()              Returns the current record's "email" value
 * @method string              getPassword()           Returns the current record's "password" value
 * @method string              getFirstname()          Returns the current record's "firstname" value
 * @method string              getLastname()           Returns the current record's "lastname" value
 * @method string              getTitle()              Returns the current record's "title" value
 * @method string              getAbout()              Returns the current record's "about" value
 * @method string              getOptions()            Returns the current record's "options" value
 * @method decimal             getLat()                Returns the current record's "lat" value
 * @method decimal             getLon()                Returns the current record's "lon" value
 * @method timestamp           getDateCreate()         Returns the current record's "date_create" value
 * @method timestamp           getTs()                 Returns the current record's "ts" value
 * @method integer             getUtype()              Returns the current record's "utype" value
 * @method string              getWebsite()            Returns the current record's "website" value
 * @method integer             getMsgDisc()            Returns the current record's "msg_disc" value
 * @method integer             getMsgReply()           Returns the current record's "msg_reply" value
 * @method integer             getMsgUpdate()          Returns the current record's "msg_update" value
 * @method integer             getMsgStop()            Returns the current record's "msg_stop" value
 * @method integer             getPhotoId()            Returns the current record's "photo_id" value
 * @method string              getLocation()           Returns the current record's "location" value
 * @method integer             getFbStatus()           Returns the current record's "fb_status" value
 * @method string              getCompany()            Returns the current record's "company" value
 * @method string              getPhone()              Returns the current record's "phone" value
 * @method integer             getActive()             Returns the current record's "active" value
 * @method UserType            getUserType()           Returns the current record's "UserType" value
 * @method UserNotify          getUserNotify()         Returns the current record's "UserNotify" value
 * @method UserForGroup        getUserForGroup()       Returns the current record's "UserForGroup" value
 * @method UserForGroupReq     getUserForGroupReq()    Returns the current record's "UserForGroupReq" value
 * @method UserForGroupBlock   getUserForGroupBlock()  Returns the current record's "UserForGroupBlock" value
 * @method UserForFriend       getUserForFriend()      Returns the current record's "UserForFriend" value
 * @method UserForFriendReq    getUserForFriendReq()   Returns the current record's "UserForFriendReq" value
 * @method UserForFriendBlock  getUserForFriendBlock() Returns the current record's "UserForFriendBlock" value
 * @method FishForUser         getFishForUser()        Returns the current record's "FishForUser" value
 * @method Doctrine_Collection getDisc()               Returns the current record's "Disc" collection
 * @method Doctrine_Collection getDiscReply()          Returns the current record's "DiscReply" collection
 * @method Doctrine_Collection getReport()             Returns the current record's "Report" collection
 * @method Doctrine_Collection getReportReply()        Returns the current record's "ReportReply" collection
 * @method Doctrine_Collection getBlog()               Returns the current record's "Blog" collection
 * @method Doctrine_Collection getBlogReply()          Returns the current record's "BlogReply" collection
 * @method Doctrine_Collection getSpot()               Returns the current record's "Spot" collection
 * @method Doctrine_Collection getSpotReply()          Returns the current record's "SpotReply" collection
 * @method Doctrine_Collection getFile()               Returns the current record's "File" collection
 * @method Doctrine_Collection getFileReply()          Returns the current record's "FileReply" collection
 * @method Doctrine_Collection getUserGroup()          Returns the current record's "UserGroup" collection
 * @method Doctrine_Collection getFish()               Returns the current record's "Fish" collection
 * @method Doctrine_Collection getPromo()              Returns the current record's "Promo" collection
 * @method Doctrine_Collection getPromoSent()          Returns the current record's "PromoSent" collection
 * @method User                setId()                 Sets the current record's "id" value
 * @method User                setUsername()           Sets the current record's "username" value
 * @method User                setEmail()              Sets the current record's "email" value
 * @method User                setPassword()           Sets the current record's "password" value
 * @method User                setFirstname()          Sets the current record's "firstname" value
 * @method User                setLastname()           Sets the current record's "lastname" value
 * @method User                setTitle()              Sets the current record's "title" value
 * @method User                setAbout()              Sets the current record's "about" value
 * @method User                setOptions()            Sets the current record's "options" value
 * @method User                setLat()                Sets the current record's "lat" value
 * @method User                setLon()                Sets the current record's "lon" value
 * @method User                setDateCreate()         Sets the current record's "date_create" value
 * @method User                setTs()                 Sets the current record's "ts" value
 * @method User                setUtype()              Sets the current record's "utype" value
 * @method User                setWebsite()            Sets the current record's "website" value
 * @method User                setMsgDisc()            Sets the current record's "msg_disc" value
 * @method User                setMsgReply()           Sets the current record's "msg_reply" value
 * @method User                setMsgUpdate()          Sets the current record's "msg_update" value
 * @method User                setMsgStop()            Sets the current record's "msg_stop" value
 * @method User                setPhotoId()            Sets the current record's "photo_id" value
 * @method User                setLocation()           Sets the current record's "location" value
 * @method User                setFbStatus()           Sets the current record's "fb_status" value
 * @method User                setCompany()            Sets the current record's "company" value
 * @method User                setPhone()              Sets the current record's "phone" value
 * @method User                setActive()             Sets the current record's "active" value
 * @method User                setUserType()           Sets the current record's "UserType" value
 * @method User                setUserNotify()         Sets the current record's "UserNotify" value
 * @method User                setUserForGroup()       Sets the current record's "UserForGroup" value
 * @method User                setUserForGroupReq()    Sets the current record's "UserForGroupReq" value
 * @method User                setUserForGroupBlock()  Sets the current record's "UserForGroupBlock" value
 * @method User                setUserForFriend()      Sets the current record's "UserForFriend" value
 * @method User                setUserForFriendReq()   Sets the current record's "UserForFriendReq" value
 * @method User                setUserForFriendBlock() Sets the current record's "UserForFriendBlock" value
 * @method User                setFishForUser()        Sets the current record's "FishForUser" value
 * @method User                setDisc()               Sets the current record's "Disc" collection
 * @method User                setDiscReply()          Sets the current record's "DiscReply" collection
 * @method User                setReport()             Sets the current record's "Report" collection
 * @method User                setReportReply()        Sets the current record's "ReportReply" collection
 * @method User                setBlog()               Sets the current record's "Blog" collection
 * @method User                setBlogReply()          Sets the current record's "BlogReply" collection
 * @method User                setSpot()               Sets the current record's "Spot" collection
 * @method User                setSpotReply()          Sets the current record's "SpotReply" collection
 * @method User                setFile()               Sets the current record's "File" collection
 * @method User                setFileReply()          Sets the current record's "FileReply" collection
 * @method User                setUserGroup()          Sets the current record's "UserGroup" collection
 * @method User                setFish()               Sets the current record's "Fish" collection
 * @method User                setPromo()              Sets the current record's "Promo" collection
 * @method User                setPromoSent()          Sets the current record's "PromoSent" collection
 * 
 * @package    fb
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUser extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('user');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('username', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('email', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('password', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('firstname', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('lastname', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('title', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('about', 'string', 1000, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1000,
             ));
        $this->hasColumn('options', 'string', 2000, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 2000,
             ));
        $this->hasColumn('lat', 'decimal', 18, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 18,
             'scale' => '12',
             ));
        $this->hasColumn('lon', 'decimal', 18, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 18,
             'scale' => '12',
             ));
        $this->hasColumn('date_create', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('ts', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('utype', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('website', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('msg_disc', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('msg_reply', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('msg_update', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('msg_stop', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('photo_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('location', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('fb_status', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('company', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('phone', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('active', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('UserType', array(
             'local' => 'utype',
             'foreign' => 'id'));

        $this->hasOne('UserNotify', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasOne('UserForGroup', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasOne('UserForGroupReq', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasOne('UserForGroupBlock', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasOne('UserForFriend', array(
             'local' => 'id',
             'foreign' => 'friend_id'));

        $this->hasOne('UserForFriendReq', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasOne('UserForFriendBlock', array(
             'local' => 'id',
             'foreign' => 'friend_id'));

        $this->hasOne('FishForUser', array(
             'local' => 'id',
             'foreign' => 'pid'));

        $this->hasMany('Disc', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('DiscReply', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Report', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('ReportReply', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Blog', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('BlogReply', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Spot', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('SpotReply', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('File', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('FileReply', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('UserGroup', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Fish', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Promo', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('PromoSent', array(
             'local' => 'id',
             'foreign' => 'user_id'));
    }
}