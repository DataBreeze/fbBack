<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Spot', 'doctrine-discuss');

/**
 * BaseSpot
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property decimal $lat
 * @property decimal $lon
 * @property timestamp $date_create
 * @property timestamp $ts
 * @property string $content
 * @property string $loc
 * @property integer $user_id
 * @property string $caption
 * @property string $keyword
 * @property integer $sec
 * @property integer $group_id
 * @property string $url
 * @property string $url_caption
 * @property string $city
 * @property string $state
 * @property integer $site_id
 * @property integer $sec_photo
 * @property FileForSpot $FileForSpot
 * @property User $User
 * @property UserGroup $UserGroup
 * @property SpotReply $SpotReply
 * @property FishForSpot $FishForSpot
 * 
 * @method integer     getId()          Returns the current record's "id" value
 * @method decimal     getLat()         Returns the current record's "lat" value
 * @method decimal     getLon()         Returns the current record's "lon" value
 * @method timestamp   getDateCreate()  Returns the current record's "date_create" value
 * @method timestamp   getTs()          Returns the current record's "ts" value
 * @method string      getContent()     Returns the current record's "content" value
 * @method string      getLoc()         Returns the current record's "loc" value
 * @method integer     getUserId()      Returns the current record's "user_id" value
 * @method string      getCaption()     Returns the current record's "caption" value
 * @method string      getKeyword()     Returns the current record's "keyword" value
 * @method integer     getSec()         Returns the current record's "sec" value
 * @method integer     getGroupId()     Returns the current record's "group_id" value
 * @method string      getUrl()         Returns the current record's "url" value
 * @method string      getUrlCaption()  Returns the current record's "url_caption" value
 * @method string      getCity()        Returns the current record's "city" value
 * @method string      getState()       Returns the current record's "state" value
 * @method integer     getSiteId()      Returns the current record's "site_id" value
 * @method integer     getSecPhoto()    Returns the current record's "sec_photo" value
 * @method FileForSpot getFileForSpot() Returns the current record's "FileForSpot" value
 * @method User        getUser()        Returns the current record's "User" value
 * @method UserGroup   getUserGroup()   Returns the current record's "UserGroup" value
 * @method SpotReply   getSpotReply()   Returns the current record's "SpotReply" value
 * @method FishForSpot getFishForSpot() Returns the current record's "FishForSpot" value
 * @method Spot        setId()          Sets the current record's "id" value
 * @method Spot        setLat()         Sets the current record's "lat" value
 * @method Spot        setLon()         Sets the current record's "lon" value
 * @method Spot        setDateCreate()  Sets the current record's "date_create" value
 * @method Spot        setTs()          Sets the current record's "ts" value
 * @method Spot        setContent()     Sets the current record's "content" value
 * @method Spot        setLoc()         Sets the current record's "loc" value
 * @method Spot        setUserId()      Sets the current record's "user_id" value
 * @method Spot        setCaption()     Sets the current record's "caption" value
 * @method Spot        setKeyword()     Sets the current record's "keyword" value
 * @method Spot        setSec()         Sets the current record's "sec" value
 * @method Spot        setGroupId()     Sets the current record's "group_id" value
 * @method Spot        setUrl()         Sets the current record's "url" value
 * @method Spot        setUrlCaption()  Sets the current record's "url_caption" value
 * @method Spot        setCity()        Sets the current record's "city" value
 * @method Spot        setState()       Sets the current record's "state" value
 * @method Spot        setSiteId()      Sets the current record's "site_id" value
 * @method Spot        setSecPhoto()    Sets the current record's "sec_photo" value
 * @method Spot        setFileForSpot() Sets the current record's "FileForSpot" value
 * @method Spot        setUser()        Sets the current record's "User" value
 * @method Spot        setUserGroup()   Sets the current record's "UserGroup" value
 * @method Spot        setSpotReply()   Sets the current record's "SpotReply" value
 * @method Spot        setFishForSpot() Sets the current record's "FishForSpot" value
 * 
 * @package    fb
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseSpot extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('spot');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('lat', 'decimal', 18, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 18,
             'scale' => '12',
             ));
        $this->hasColumn('lon', 'decimal', 18, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 18,
             'scale' => '12',
             ));
        $this->hasColumn('date_create', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('ts', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('content', 'string', 500, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 500,
             ));
        $this->hasColumn('loc', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('caption', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('keyword', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('sec', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('group_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('url', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('url_caption', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('city', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('state', 'string', 2, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 2,
             ));
        $this->hasColumn('site_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('sec_photo', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('FileForSpot', array(
             'local' => 'id',
             'foreign' => 'spot_id'));

        $this->hasOne('User', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        $this->hasOne('UserGroup', array(
             'local' => 'group_id',
             'foreign' => 'id'));

        $this->hasOne('SpotReply', array(
             'local' => 'id',
             'foreign' => 'pid'));

        $this->hasOne('FishForSpot', array(
             'local' => 'id',
             'foreign' => 'pid'));
    }
}