<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('FishSurvey', 'doctrine');

/**
 * BaseFishSurvey
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $survey_year
 * @property integer $haul_id
 * @property string $scientific_name
 * @property string $common_name
 * @property float $haul_lat_dd
 * @property float $haul_lon_dd
 * @property string $position_desc
 * @property integer $catch_range_min_kg_per_sqkm
 * @property integer $catch_range_max_kg_per_sqkm
 * @property string $map_leg_kg_per_sqkm
 * @property integer $id
 * 
 * @method integer    getSurveyYear()                  Returns the current record's "survey_year" value
 * @method integer    getHaulId()                      Returns the current record's "haul_id" value
 * @method string     getScientificName()              Returns the current record's "scientific_name" value
 * @method string     getCommonName()                  Returns the current record's "common_name" value
 * @method float      getHaulLatDd()                   Returns the current record's "haul_lat_dd" value
 * @method float      getHaulLonDd()                   Returns the current record's "haul_lon_dd" value
 * @method string     getPositionDesc()                Returns the current record's "position_desc" value
 * @method integer    getCatchRangeMinKgPerSqkm()      Returns the current record's "catch_range_min_kg_per_sqkm" value
 * @method integer    getCatchRangeMaxKgPerSqkm()      Returns the current record's "catch_range_max_kg_per_sqkm" value
 * @method string     getMapLegKgPerSqkm()             Returns the current record's "map_leg_kg_per_sqkm" value
 * @method integer    getId()                          Returns the current record's "id" value
 * @method FishSurvey setSurveyYear()                  Sets the current record's "survey_year" value
 * @method FishSurvey setHaulId()                      Sets the current record's "haul_id" value
 * @method FishSurvey setScientificName()              Sets the current record's "scientific_name" value
 * @method FishSurvey setCommonName()                  Sets the current record's "common_name" value
 * @method FishSurvey setHaulLatDd()                   Sets the current record's "haul_lat_dd" value
 * @method FishSurvey setHaulLonDd()                   Sets the current record's "haul_lon_dd" value
 * @method FishSurvey setPositionDesc()                Sets the current record's "position_desc" value
 * @method FishSurvey setCatchRangeMinKgPerSqkm()      Sets the current record's "catch_range_min_kg_per_sqkm" value
 * @method FishSurvey setCatchRangeMaxKgPerSqkm()      Sets the current record's "catch_range_max_kg_per_sqkm" value
 * @method FishSurvey setMapLegKgPerSqkm()             Sets the current record's "map_leg_kg_per_sqkm" value
 * @method FishSurvey setId()                          Sets the current record's "id" value
 * 
 * @package    fb
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseFishSurvey extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('fish_survey');
        $this->hasColumn('survey_year', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('haul_id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('scientific_name', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('common_name', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('haul_lat_dd', 'float', null, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('haul_lon_dd', 'float', null, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('position_desc', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('catch_range_min_kg_per_sqkm', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('catch_range_max_kg_per_sqkm', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('map_leg_kg_per_sqkm', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}