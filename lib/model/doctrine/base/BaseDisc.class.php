<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Disc', 'doctrine-discuss');

/**
 * BaseDisc
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property decimal $lat
 * @property decimal $lon
 * @property timestamp $date_create
 * @property timestamp $ts
 * @property string $content
 * @property string $loc
 * @property integer $user_id
 * @property integer $pid
 * @property integer $fish_id
 * @property string $fish_name
 * @property integer $cat_id
 * @property string $caption
 * @property integer $wtype
 * @property string $cat
 * @property integer $sec
 * @property integer $group_id
 * @property FishForDisc $FishForDisc
 * @property User $User
 * @property UserGroup $UserGroup
 * @property DiscReply $DiscReply
 * @property Doctrine_Collection $FileForDisc
 * 
 * @method integer             getId()          Returns the current record's "id" value
 * @method decimal             getLat()         Returns the current record's "lat" value
 * @method decimal             getLon()         Returns the current record's "lon" value
 * @method timestamp           getDateCreate()  Returns the current record's "date_create" value
 * @method timestamp           getTs()          Returns the current record's "ts" value
 * @method string              getContent()     Returns the current record's "content" value
 * @method string              getLoc()         Returns the current record's "loc" value
 * @method integer             getUserId()      Returns the current record's "user_id" value
 * @method integer             getPid()         Returns the current record's "pid" value
 * @method integer             getFishId()      Returns the current record's "fish_id" value
 * @method string              getFishName()    Returns the current record's "fish_name" value
 * @method integer             getCatId()       Returns the current record's "cat_id" value
 * @method string              getCaption()     Returns the current record's "caption" value
 * @method integer             getWtype()       Returns the current record's "wtype" value
 * @method string              getCat()         Returns the current record's "cat" value
 * @method integer             getSec()         Returns the current record's "sec" value
 * @method integer             getGroupId()     Returns the current record's "group_id" value
 * @method FishForDisc         getFishForDisc() Returns the current record's "FishForDisc" value
 * @method User                getUser()        Returns the current record's "User" value
 * @method UserGroup           getUserGroup()   Returns the current record's "UserGroup" value
 * @method DiscReply           getDiscReply()   Returns the current record's "DiscReply" value
 * @method Doctrine_Collection getFileForDisc() Returns the current record's "FileForDisc" collection
 * @method Disc                setId()          Sets the current record's "id" value
 * @method Disc                setLat()         Sets the current record's "lat" value
 * @method Disc                setLon()         Sets the current record's "lon" value
 * @method Disc                setDateCreate()  Sets the current record's "date_create" value
 * @method Disc                setTs()          Sets the current record's "ts" value
 * @method Disc                setContent()     Sets the current record's "content" value
 * @method Disc                setLoc()         Sets the current record's "loc" value
 * @method Disc                setUserId()      Sets the current record's "user_id" value
 * @method Disc                setPid()         Sets the current record's "pid" value
 * @method Disc                setFishId()      Sets the current record's "fish_id" value
 * @method Disc                setFishName()    Sets the current record's "fish_name" value
 * @method Disc                setCatId()       Sets the current record's "cat_id" value
 * @method Disc                setCaption()     Sets the current record's "caption" value
 * @method Disc                setWtype()       Sets the current record's "wtype" value
 * @method Disc                setCat()         Sets the current record's "cat" value
 * @method Disc                setSec()         Sets the current record's "sec" value
 * @method Disc                setGroupId()     Sets the current record's "group_id" value
 * @method Disc                setFishForDisc() Sets the current record's "FishForDisc" value
 * @method Disc                setUser()        Sets the current record's "User" value
 * @method Disc                setUserGroup()   Sets the current record's "UserGroup" value
 * @method Disc                setDiscReply()   Sets the current record's "DiscReply" value
 * @method Disc                setFileForDisc() Sets the current record's "FileForDisc" collection
 * 
 * @package    fb
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseDisc extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('disc');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('lat', 'decimal', 18, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 18,
             'scale' => '12',
             ));
        $this->hasColumn('lon', 'decimal', 18, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 18,
             'scale' => '12',
             ));
        $this->hasColumn('date_create', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('ts', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('content', 'string', 5000, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 5000,
             ));
        $this->hasColumn('loc', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('pid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('fish_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('fish_name', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('cat_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('caption', 'string', 150, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 150,
             ));
        $this->hasColumn('wtype', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('cat', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('sec', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('group_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('FishForDisc', array(
             'local' => 'id',
             'foreign' => 'pid'));

        $this->hasOne('User', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        $this->hasOne('UserGroup', array(
             'local' => 'group_id',
             'foreign' => 'id'));

        $this->hasOne('DiscReply', array(
             'local' => 'id',
             'foreign' => 'pid'));

        $this->hasMany('FileForDisc', array(
             'local' => 'id',
             'foreign' => 'disc_id'));
    }
}