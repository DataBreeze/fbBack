<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Report', 'doctrine-discuss');

/**
 * BaseReport
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property decimal $lat
 * @property decimal $lon
 * @property decimal $weight
 * @property decimal $length
 * @property integer $count_fish
 * @property timestamp $date_create
 * @property timestamp $ts
 * @property string $content
 * @property string $loc
 * @property integer $user_id
 * @property integer $fish_id
 * @property string $caption
 * @property string $fish_name
 * @property timestamp $date_catch
 * @property integer $sec
 * @property integer $group_id
 * @property FileForReport $FileForReport
 * @property User $User
 * @property UserGroup $UserGroup
 * @property ReportReply $ReportReply
 * @property Fish $Fish
 * @property FishForReport $FishForReport
 * 
 * @method integer       getId()            Returns the current record's "id" value
 * @method decimal       getLat()           Returns the current record's "lat" value
 * @method decimal       getLon()           Returns the current record's "lon" value
 * @method decimal       getWeight()        Returns the current record's "weight" value
 * @method decimal       getLength()        Returns the current record's "length" value
 * @method integer       getCountFish()     Returns the current record's "count_fish" value
 * @method timestamp     getDateCreate()    Returns the current record's "date_create" value
 * @method timestamp     getTs()            Returns the current record's "ts" value
 * @method string        getContent()       Returns the current record's "content" value
 * @method string        getLoc()           Returns the current record's "loc" value
 * @method integer       getUserId()        Returns the current record's "user_id" value
 * @method integer       getFishId()        Returns the current record's "fish_id" value
 * @method string        getCaption()       Returns the current record's "caption" value
 * @method string        getFishName()      Returns the current record's "fish_name" value
 * @method timestamp     getDateCatch()     Returns the current record's "date_catch" value
 * @method integer       getSec()           Returns the current record's "sec" value
 * @method integer       getGroupId()       Returns the current record's "group_id" value
 * @method FileForReport getFileForReport() Returns the current record's "FileForReport" value
 * @method User          getUser()          Returns the current record's "User" value
 * @method UserGroup     getUserGroup()     Returns the current record's "UserGroup" value
 * @method ReportReply   getReportReply()   Returns the current record's "ReportReply" value
 * @method Fish          getFish()          Returns the current record's "Fish" value
 * @method FishForReport getFishForReport() Returns the current record's "FishForReport" value
 * @method Report        setId()            Sets the current record's "id" value
 * @method Report        setLat()           Sets the current record's "lat" value
 * @method Report        setLon()           Sets the current record's "lon" value
 * @method Report        setWeight()        Sets the current record's "weight" value
 * @method Report        setLength()        Sets the current record's "length" value
 * @method Report        setCountFish()     Sets the current record's "count_fish" value
 * @method Report        setDateCreate()    Sets the current record's "date_create" value
 * @method Report        setTs()            Sets the current record's "ts" value
 * @method Report        setContent()       Sets the current record's "content" value
 * @method Report        setLoc()           Sets the current record's "loc" value
 * @method Report        setUserId()        Sets the current record's "user_id" value
 * @method Report        setFishId()        Sets the current record's "fish_id" value
 * @method Report        setCaption()       Sets the current record's "caption" value
 * @method Report        setFishName()      Sets the current record's "fish_name" value
 * @method Report        setDateCatch()     Sets the current record's "date_catch" value
 * @method Report        setSec()           Sets the current record's "sec" value
 * @method Report        setGroupId()       Sets the current record's "group_id" value
 * @method Report        setFileForReport() Sets the current record's "FileForReport" value
 * @method Report        setUser()          Sets the current record's "User" value
 * @method Report        setUserGroup()     Sets the current record's "UserGroup" value
 * @method Report        setReportReply()   Sets the current record's "ReportReply" value
 * @method Report        setFish()          Sets the current record's "Fish" value
 * @method Report        setFishForReport() Sets the current record's "FishForReport" value
 * 
 * @package    fb
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseReport extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('report');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('lat', 'decimal', 18, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 18,
             'scale' => '12',
             ));
        $this->hasColumn('lon', 'decimal', 18, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 18,
             'scale' => '12',
             ));
        $this->hasColumn('weight', 'decimal', 8, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 8,
             'scale' => '2',
             ));
        $this->hasColumn('length', 'decimal', 8, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 8,
             'scale' => '2',
             ));
        $this->hasColumn('count_fish', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('date_create', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('ts', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('content', 'string', 1000, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1000,
             ));
        $this->hasColumn('loc', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('fish_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('caption', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('fish_name', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('date_catch', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('sec', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('group_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('FileForReport', array(
             'local' => 'id',
             'foreign' => 'report_id'));

        $this->hasOne('User', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        $this->hasOne('UserGroup', array(
             'local' => 'group_id',
             'foreign' => 'id'));

        $this->hasOne('ReportReply', array(
             'local' => 'id',
             'foreign' => 'pid'));

        $this->hasOne('Fish', array(
             'local' => 'fish_id',
             'foreign' => 'id'));

        $this->hasOne('FishForReport', array(
             'local' => 'id',
             'foreign' => 'pid'));
    }
}