<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Site', 'doctrine');

/**
 * BaseSite
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $site_id
 * @property string $name
 * @property string $address
 * @property string $city
 * @property string $state
 * @property string $zip
 * @property string $county
 * @property decimal $lat
 * @property decimal $lon
 * @property string $fee
 * @property string $night
 * @property string $description
 * @property string $directions
 * @property integer $spot_id
 * @property State $State
 * @property Doctrine_Collection $CatchByMonth
 * 
 * @method integer             getId()           Returns the current record's "id" value
 * @method string              getSiteId()       Returns the current record's "site_id" value
 * @method string              getName()         Returns the current record's "name" value
 * @method string              getAddress()      Returns the current record's "address" value
 * @method string              getCity()         Returns the current record's "city" value
 * @method string              getState()        Returns the current record's "state" value
 * @method string              getZip()          Returns the current record's "zip" value
 * @method string              getCounty()       Returns the current record's "county" value
 * @method decimal             getLat()          Returns the current record's "lat" value
 * @method decimal             getLon()          Returns the current record's "lon" value
 * @method string              getFee()          Returns the current record's "fee" value
 * @method string              getNight()        Returns the current record's "night" value
 * @method string              getDescription()  Returns the current record's "description" value
 * @method string              getDirections()   Returns the current record's "directions" value
 * @method integer             getSpotId()       Returns the current record's "spot_id" value
 * @method State               getState()        Returns the current record's "State" value
 * @method Doctrine_Collection getCatchByMonth() Returns the current record's "CatchByMonth" collection
 * @method Site                setId()           Sets the current record's "id" value
 * @method Site                setSiteId()       Sets the current record's "site_id" value
 * @method Site                setName()         Sets the current record's "name" value
 * @method Site                setAddress()      Sets the current record's "address" value
 * @method Site                setCity()         Sets the current record's "city" value
 * @method Site                setState()        Sets the current record's "state" value
 * @method Site                setZip()          Sets the current record's "zip" value
 * @method Site                setCounty()       Sets the current record's "county" value
 * @method Site                setLat()          Sets the current record's "lat" value
 * @method Site                setLon()          Sets the current record's "lon" value
 * @method Site                setFee()          Sets the current record's "fee" value
 * @method Site                setNight()        Sets the current record's "night" value
 * @method Site                setDescription()  Sets the current record's "description" value
 * @method Site                setDirections()   Sets the current record's "directions" value
 * @method Site                setSpotId()       Sets the current record's "spot_id" value
 * @method Site                setState()        Sets the current record's "State" value
 * @method Site                setCatchByMonth() Sets the current record's "CatchByMonth" collection
 * 
 * @package    fb
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseSite extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('site');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('site_id', 'string', 5, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 5,
             ));
        $this->hasColumn('name', 'string', 125, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 125,
             ));
        $this->hasColumn('address', 'string', 125, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 125,
             ));
        $this->hasColumn('city', 'string', 125, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 125,
             ));
        $this->hasColumn('state', 'string', 2, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 2,
             ));
        $this->hasColumn('zip', 'string', 15, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 15,
             ));
        $this->hasColumn('county', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('lat', 'decimal', 18, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 18,
             'scale' => '12',
             ));
        $this->hasColumn('lon', 'decimal', 18, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 18,
             'scale' => '12',
             ));
        $this->hasColumn('fee', 'string', 1, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('night', 'string', 2, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 2,
             ));
        $this->hasColumn('description', 'string', 500, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 500,
             ));
        $this->hasColumn('directions', 'string', 500, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 500,
             ));
        $this->hasColumn('spot_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('State', array(
             'local' => 'state',
             'foreign' => 'state'));

        $this->hasMany('CatchByMonth', array(
             'local' => 'id',
             'foreign' => 'int_site_id'));
    }
}