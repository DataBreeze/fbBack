<?php
  /**
   * ReportTable
   * This class has been auto-generated by the Doctrine ORM Framework
   * Report = Fish Catch
   */
class ReportTable extends Doctrine_Table{

  const REPORT_RECORD_LIMIT = 20;
  const REPORT_BY_FISH_RECORD_LIMIT = 100;
  
  public static function getInstance(){
    return Doctrine_Core::getTable('Report');
  }
  
  public function addReport($post){
    $geo = $post['geo'];
    $rep = new Report();
    $sec = intval($post['sec']);
    if($sec < 1){
      $sec = 1;
    }elseif( ($sec == fbLib::SEC_GROUP) and $post['group_id'] ){
      $rep->setGroupId($post['group_id']);	
    }
    $rep->setSec($sec);
    
    $rep->setLat($geo['lat']);
    $rep->setLon($geo['lon']);
    $rep->setUserId($post['user_id']);
    
    $post['content'] = strip_tags($post['content']);
    $post['content'] = trim($post['content']);
    $rep->setContent($post['content']);
    
    $post['caption'] = strip_tags($post['caption']);
    $post['caption'] = trim($post['caption']);
    $rep->setCaption($post['caption']);
    
    $post['loc'] = strip_tags($post['loc']);
    $post['loc'] = trim($post['loc']);
    $rep->setLoc($post['loc']);
    
    $rep->setWeight($post['weight']);
    $rep->setLength($post['length']);
    $rep->setCountFish($post['count']);
    
    if($post['date_catch']){
      $rep->setDateCatch($post['date_catch']);
    }else{
      $rep->setDateCatch(new Doctrine_Expression('NOW()'));
    }
    $rep->setDateCreate(new Doctrine_Expression('NOW()'));

    $post['fishname'] = strip_tags($post['fishname']);
    $post['fishname'] = trim($post['fishname']);
    $rep->setFishName($post['fishname']);
    if($post['fish_id']){
      $rep->setFishId($post['fish_id']);
    }elseif($fish = Doctrine_Core::getTable('Fish')->fishByName($post['fishname'])){
      if( $fish['id'] ){
	$rep->setFishId($fish['id']);
      }
    }
    $rep->save();
    $report_id = $rep->getId();
    $new_report = $this->getReport($report_id);
    return $new_report;
  }
  
  public function updateReport($post){
    $report_id = $post['report_id'];
    if($rep = $this->getInstance()->find($report_id)){	
      if($post['sec']){
	$sec = intval($post['sec']);
	if($sec < 1){
	  $sec = 1;
	}elseif( ($sec == fbLib::SEC_GROUP) and $post['group_id'] ){
	  $rep->setGroupId($post['group_id']);	
	}
	$rep->setSec($sec);
      }
      if($post['content'] != $rep->getContent()){
	$post['content'] = strip_tags($post['content']);
	$post['content'] = trim($post['content']);
	$rep->setContent($post['content']);
      }
      if($post['caption'] != $rep->getCaption()){
	$post['caption'] = strip_tags($post['caption']);
	$post['caption'] = trim($post['caption']);
	$rep->setCaption($post['caption']);
      }
      if($post['loc'] != $rep->getLoc()){
	$post['loc'] = strip_tags($post['loc']);
	$post['loc'] = trim($post['loc']);
	$rep->setLoc($post['loc']);
      }
      if( $post['fishname'] and ($post['fishname'] != $rep->getFishName()) ){
	$post['fishname'] = strip_tags($post['fishname']);
	$post['fishname'] = trim($post['fishname']);
	$rep->setFishName($post['fishname']);
	if($post['fish_id']){
	  $rep->setFishId($post['fish_id']);
	}elseif($fish = Doctrine_Core::getTable('Fish')->fishByName($post['fishname'])){
	  if( $fish['id'] ){
	    $rep->setFishId($fish['id']);
	  }
	}
      }
      $rep->setWeight($post['weight']);
      $rep->setLength($post['length']);
      $rep->setCountFish($post['count']);
      
      if($post['date_catch']){
	$rep->setDateCatch($post['date_catch']);
      }else{
	$rep->setDateCatch(new Doctrine_Expression('NOW()'));
      }
      $rep->save();
      $new_report = $this->getReport($report_id);
      return $new_report;
    }else{
      return False;
    }
  }

  public function editGeo($post){
    $geo = $post['geo'];
    $report_id = $post['report_id'];
    if($rep = $this->find($report_id)){	
      if($geo and $geo['lat'] and $geo['lon']){
	$rep->setLat($geo['lat']);
	$rep->setLon($geo['lon']);
	$rep->save();
	$new_report = $this->getReport($report_id);
	return $new_report;
      }
    }
    return False;
  }
  
  public function getRecAllow($report_id){
    if($rec = $this->getReport($report_id)){
      return fbLib::getRecAllow($rec);
    }
    return False;
  }

  public function getRec($report_id){
    return $this->getReport($report_id);
  }
  
  public function getReport($report_id){
    $q = Doctrine_Query::create()
      ->select('r.id,r.group_id,r.sec,r.lat,r.lon,YEAR(r.date_catch) AS dyear,MONTH(r.date_catch) AS dmonth,DAY(r.date_catch) AS dday,DATE_FORMAT(r.date_catch,\'%c/%e/%Y @ %r\') AS date_time_catch,DATE_FORMAT(r.date_catch,\'%c/%e/%Y\') AS date_catch,HOUR(r.date_catch) AS hour,r.caption,r.content,r.fish_name,r.length,r.weight,r.count_fish,r.loc,r.user_id,u.username,u.photo_id,f.name_common,f.wiki_url,f.noaa_id')
      ->from('Report r')
      ->leftJoin('r.Fish f')
      ->innerJoin('r.User u')
      ->where('r.id = ?',$report_id);
    $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
    $rec = array();
    if( count($rows) > 0){
      $row = $rows[0];
      $rec['id'] = intval($row['r_id']);
      $rec['group_id'] = intval($row['r_group_id']);
      $rec['sec'] = intval($row['r_sec']);
      $rec['lat'] = floatval($row['r_lat']);
      $rec['lon'] = floatval($row['r_lon']);
      $rec['date_catch'] = $row['r_date_catch'];
      $rec['date_create'] = $row['r_date_catch'];
      $rec['date_time_catch'] = $row['r_date_time_catch'];
      $rec['hour'] = $row['r_hour'];
      $rec['year'] = $row['r_dyear'];
      $rec['month'] = $row['r_dmonth'];
      $rec['day'] = $row['r_dday'];
      $rec['loc'] = $row['r_loc'];
      $rec['location'] = $row['r_loc'];
      $rec['fish_name_orig'] = $row['r_fish_name'];
      $rec['caption'] = trim($row['r_caption']);
      $rec['content'] = trim($row['r_content']);
      $rec['weight'] = trim($row['r_weight']);
      $rec['length'] = trim($row['r_length']);
      $rec['count'] = trim($row['r_count_fish']);
      $rec['user_id'] = $row['r_user_id'];
      $rec['fish_name'] = $row['f_name_common'];
      $rec['wiki_url'] = $row['f_wiki_url'];
      $rec['noaa_id'] = $row['f_noaa_id'];
      $rec['username'] = $row['u_username'];
      $rec['photo_id'] = $row['u_photo_id'];
      $rec['reply_count'] = Doctrine_Core::getTable('ReportReply')->getReplyCount($report_id);
      $rec['reply_offset'] = -1;
      $rec['replies'] = Doctrine_Core::getTable('ReportReply')->getReplies($report_id,3);
      $photos = $this->getPhotos($report_id);
      $rec['photo_count'] = count($photos);
      $rec['photos'] = $photos;
    }
    return $rec;
  }
  
  public function getReportsBBCount($geo,$month_range){
    $q = Doctrine_Query::create()
      ->select('COUNT(*) AS report_count')
      ->from('Report r')
      ->innerJoin('r.User u')
      ->where('r.lat > ? AND r.lat < ?', array($geo['sw_lat'],$geo['ne_lat']))
      ->andWhere('r.lon > ? AND r.lon < ?', array($geo['sw_lon'],$geo['ne_lon']))
      ->andWhere('MONTH(r.date_catch) >= ? AND MONTH(r.date_catch) <= ?', $month_range);
    if( ! fbLib::addSecSQL($q,'r')){
      return 0;
    }
    $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
    return intval($rows[0]['r_report_count']);
  }
  public function getReportsBB($geo,$month_range = array(1,12),$offset = 0){
    $count = $this->getReportsBBCount($geo,$month_range);
    $recs = array();
    $ret = array('count_total' => $count, 'count' => 0, 'records' => $recs,
		 'record_offset' => intval($offset),
		 'record_limit' => ReportTable::REPORT_RECORD_LIMIT);
    if($count){
      $q = Doctrine_Query::create()
	->select('r.id,r.group_id,r.sec,r.lat,r.lon,DATE_FORMAT(r.date_catch,\'%c/%e/%y @ %r\') AS date_time_catch,DATE_FORMAT(r.date_catch,\'%c/%e/%y\') AS date_catch,r.caption,r.content,r.fish_name,r.length,r.weight,r.count_fish,r.loc,r.user_id,u.username,u.photo_id,f.name_common,f.wiki_url,f.noaa_id')
	->from('Report r')
	->innerJoin('r.User u')
	->leftJoin('r.Fish f')
	->where('r.lat > ? AND r.lat < ?', array($geo['sw_lat'],$geo['ne_lat']))
	->andWhere('r.lon > ? AND r.lon < ?', array($geo['sw_lon'],$geo['ne_lon']))
	->andWhere('MONTH(r.date_catch) >= ? AND MONTH(r.date_catch) <= ?', $month_range)
	->orderBy('r.date_create DESC')
	->limit(ReportTable::REPORT_RECORD_LIMIT);
      if($offset > 0){
	$q->offset($offset * ReportTable::REPORT_RECORD_LIMIT);
      }
      fbLib::addSecSQL($q,'r');
      $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
      $recs = array();
      foreach($rows as $i => $row){
	$report_id = intval($row['r_id']);
	$recs[$i]['id'] = $report_id;
	$recs[$i]['sec'] = intval($row['r_sec']);
	$recs[$i]['group_id'] = intval($row['r_group_id']);
	$recs[$i]['lat'] = floatval($row['r_lat']);
	$recs[$i]['lon'] = floatval($row['r_lon']);
	$recs[$i]['date_time_catch'] = $row['r_date_time_catch'];
	$recs[$i]['date_catch'] = $row['r_date_catch'];
	$recs[$i]['loc'] = $row['r_loc'];
	$recs[$i]['location'] = $row['r_loc'];
	$recs[$i]['fish_name_orig'] = trim($row['r_fish_name']);
	$recs[$i]['caption'] = trim($row['r_caption']);
	$recs[$i]['content'] = trim($row['r_content']);
	$recs[$i]['weight'] = intval($row['r_weight']);
	$recs[$i]['length'] = intval($row['r_length']);
	$recs[$i]['count'] = intval($row['r_count_fish']);
	$recs[$i]['user_id'] = $row['r_user_id'];
	$recs[$i]['fish_name'] = $row['f_name_common'];
	$recs[$i]['wiki_url'] = $row['f_wiki_url'];
	$recs[$i]['noaa_id'] = $row['f_noaa_id'];
	$recs[$i]['username'] = $row['u_username'];
	$recs[$i]['photo_id'] = $row['u_photo_id'];
	$recs[$i]['reply_count'] = Doctrine_Core::getTable('ReportReply')->getReplyCount($report_id);
	$recs[$i]['replies'] = Doctrine_Core::getTable('ReportReply')->getReplies($report_id,3);
	$recs[$i]['reply_offset'] = -1;
	$photos = $this->getPhotos($report_id);
	$recs[$i]['photo_count'] = count($photos);
	$recs[$i]['photos'] = $photos;
      }
      $ret['count'] = count($recs);
      $ret['records'] = $recs;
    }
    return $ret;
  }

  public function deleteReport($report_id){
    return Doctrine_Query::create()
      ->delete()
      ->from('Report r')
      ->where('r.id = ?', $report_id)
      ->execute();
  }
  
  public function getPhotos($report_id,$limit = 20){
    $q = Doctrine_Query::create()
      ->select('ffr.file_id,f.caption,f.keyword,f.detail,DATE_FORMAT(f.date_create,\'%c/%e/%y\') AS dc,f.ts,f.status,f.user_id,u.username,u.photo_id')
      ->from('FileForReport ffr')
      ->innerJoin('ffr.File f')
      ->innerJoin('f.User u')
      ->where('ffr.report_id = ?',$report_id)
      ->orderBy('f.date_create DESC')
      ->limit($limit);
    $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
    $recs = array();
    if($rows && (count($rows) > 0) ){
      foreach($rows as $i => $row){
	$file_id = intval($row['ffr_file_id']);
	$recs[$i]['id'] = $file_id;
	$recs[$i]['caption'] = trim($row['f_caption']);
	$recs[$i]['keyword'] = trim($row['f_keyword']);
	$recs[$i]['detail'] = trim($row['f_detail']);
	$recs[$i]['dc'] = $row['f_dc'];
	$recs[$i]['ts'] = $row['f_ts'];
	$recs[$i]['status'] = trim($row['f_status']);
	$recs[$i]['username'] = $row['u_username'];
	$recs[$i]['photo_id'] = $row['u_photo_id'];
        $recs[$i]['reply_count'] = Doctrine_Core::getTable('FileReply')->getReplyCount($file_id);
	$recs[$i]['reply_offset'] = -1;
        $recs[$i]['replies'] = array();
      }
    }
    return $recs;
  }
  
  public function getPhotoCount($report_id){
    $q = Doctrine_Query::create()
      ->select('COUNT(*) AS photo_count')
      ->from('FileForReport f')
      ->where('f.report_id = ?',$report_id);
    $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
    return intval($rows[0]['f_photo_count']);
  }
  
  public function getPhoto($report_id,$file_id){
    $q = Doctrine_Query::create()
      ->select('ffr.file_id,ffr.report_id,f.caption,f.keyword,f.detail,DATE_FORMAT(f.date_create,\'%c/%e/%y\') AS dc,f.ts,f.status,u.username,u.photo_id')
      ->from('FileForReport ffr')
      ->innerJoin('ffr.File f')
      ->innerJoin('f.User u')
      ->where('ffr.report_id = ?',$report_id)
      ->andWhere('ffr.file_id = ?',$file_id);
    $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
    $rec = False;
    if($rows && (count($rows) > 0) ){
      $row = $rows[0];
      $rec = array();
      $rec['id'] = intval($row['ffr_file_id']);
      $rec['report_id'] = intval($row['ffr_report_id']);
      $rec['caption'] = trim($row['f_caption']);
      $rec['keyword'] = trim($row['f_keyword']);
      $rec['detail'] = trim($row['f_detail']);
      $rec['dc'] = $row['f_dc'];
      $rec['ts'] = $row['f_ts'];
      $rec['status'] = trim($row['f_status']);
      $rec['username'] = $row['u_username'];
      $rec['photo_id'] = $row['u_photo_id'];
      $rec['reply_count'] = Doctrine_Core::getTable('FileReply')->getReplyCount($rec['id']);
      $rec['reply_offset'] = -1;
      $rec['replies'] = array();
    }
    return $rec;
  }
  
  public function deletePhoto($report_id,$file_id){
    $q = Doctrine_Query::create()
      ->delete()
      ->from('FileForReport f')
      ->where('f.report_id = ?',$report_id)
      ->andWhere('f.file_id = ?',$file_id)
      ->execute();
  }
  
}