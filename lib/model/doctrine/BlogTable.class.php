<?php
/**
 * BlogTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class BlogTable extends Doctrine_Table{
  
  const BLOG_RECORD_LIMIT = 20;

  public static function getInstance(){
    return Doctrine_Core::getTable('Blog');
  }  
  
  public function addBlog($post){
    $geo = $post['geo'];
    $blog = new Blog();
    $sec = intval($post['sec']);
    if($sec < 1){
      $sec = 1;
    }elseif( ($sec == fbLib::SEC_GROUP) and $post['group_id'] ){
      $blog->setGroupId($post['group_id']);
    }
    $blog->setSec($sec);
    
    $blog->setLat($geo['lat']);
    $blog->setLon($geo['lon']);
    $blog->setUserId($post['user_id']);
    
    $post['content'] = strip_tags($post['content']);
    $post['content'] = trim($post['content']);
    $blog->setContent($post['content']);
    
    $post['caption'] = strip_tags($post['caption']);
    $post['caption'] = trim($post['caption']);
    $blog->setCaption($post['caption']);

    $post['url'] = strip_tags($post['url']);
    $post['url'] = trim($post['url']);
    if($post['url']){
      $blog->setUrl($post['url']);
    }
    $post['url_caption'] = strip_tags($post['url_caption']);
    $post['url_caption'] = trim($post['url_caption']);
    if($post['url_caption']){
      $blog->setUrlCaption($post['url_caption']);
    }
    
    $post['loc'] = strip_tags($post['loc']);
    $post['loc'] = trim($post['loc']);
    $blog->setLoc($post['loc']);
    
    $post['keyword'] = strip_tags($post['keyword']);
    $post['keyword'] = trim($post['keyword']);
    if($post['keyword'] = trim($post['keyword'])){
      $blog->setKeyword($post['keyword']);
    }
    if($post['date_blog']){
      $blog->setDateBlog($post['date_blog']);
    }else{
      $blog->setDateBlog(new Doctrine_Expression('NOW()'));
    }
    $blog->setDateCreate(new Doctrine_Expression('NOW()'));
    $blog->save();
    $blog_id = $blog->getId();
    $new_blog = $this->getBlog($blog_id);
    return $new_blog;
  }
  
  public function updateBlog($post){
    $geo = $post['geo'];
    $blog_id = $post['blog_id'];
    if($blog = $this->find($blog_id)){	
      if($post['sec']){
	$sec = intval($post['sec']);
	if($sec < 1){
	  $sec = 1;
	}elseif( ($sec == fbLib::SEC_GROUP) and $post['group_id'] ){
	  $blog->setGroupId($post['group_id']);	
	}
	$blog->setSec($sec);
      }
      if($post['content'] != $blog->getContent()){
	$post['content'] = strip_tags($post['content']);
	$post['content'] = trim($post['content']);
	$blog->setContent($post['content']);
      }
      if($post['caption'] != $blog->getCaption()){
	$post['caption'] = strip_tags($post['caption']);
	$post['caption'] = trim($post['caption']);
	$blog->setCaption($post['caption']);
      }
      if($post['loc'] != $blog->getLoc()){
	$post['loc'] = strip_tags($post['loc']);
	$post['loc'] = trim($post['loc']);
	$blog->setLoc($post['loc']);
      }
      $post['keyword'] = strip_tags($post['keyword']);
      $post['keyword'] = trim($post['keyword']);
      if($post['keyword'] = trim($post['keyword'])){
	$blog->setKeyword($post['keyword']);
      }
      if($post['date_blog']){
	$blog->setDateBlog($post['date_blog']);
      }else{
	$blog->setDateBlog(new Doctrine_Expression('NOW()'));
      }
      $post['url'] = strip_tags($post['url']);
      $post['url'] = trim($post['url']);
      $blog->setUrl($post['url']);
      $post['url_caption'] = strip_tags($post['url_caption']);
      $post['url_caption'] = trim($post['url_caption']);
      $blog->setUrlCaption($post['url_caption']);
      $blog->save();
      $new_blog = $this->getBlog($blog_id);
      return $new_blog;
    }else{
      return False;
    }
  }

  public function editGeo($post){
    $geo = $post['geo'];
    $blog_id = $post['blog_id'];
    if($blog = $this->find($blog_id)){	
      if($geo and $geo['lat'] and $geo['lon']){
	$blog->setLat($geo['lat']);
	$blog->setLon($geo['lon']);
	$blog->save();
	$new_blog = $this->getBlog($blog_id);
	return $new_blog;
      }
    }
    return False;
  }
  
  public function getRecAllow($blog_id){
    if($rec = $this->getBlog($blog_id)){
      return fbLib::getRecAllow($rec);
    }
    return False;
  }
  
  public function getRec($blog_id){
    return $this->getBlog($blog_id);
  }
  
  public function getBlog($blog_id){
    $q = Doctrine_Query::create()
      ->select($this->sqlSelect())
      ->from('Blog b')
      ->innerJoin('b.User u')
      ->where('b.id = ?',$blog_id);
    $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
    $rec = array();
    $reply = new fbBlogReply();
    $file = new fbBlogFile();
    $fish = new fbBlogFish();
    if( count($rows) > 0){
      $rec = $this->sqlRow($rows[0]);
      $rec['reply_count'] = $reply->replyCount($rec['id']);
      $rec['photo_count'] = $file->photoCount($rec['id']);
      $rec['fish_count'] = $fish->fishCount($rec['id']);
    }
    return $rec;
  }
  
  public function getBlogsBBCount(){
    $q = Doctrine_Query::create()
      ->select('COUNT(*) AS blog_count')
      ->from('Blog b')
      ->innerJoin('b.User u');
    fbLib::addBoundsSQL($q,'b');
    fbLib::addDateRangeSQL($q,'MONTH(b.date_blog)');
    fbLib::addFishSQL($q, array('source'=>'b', 'fish_table'=>'FishForBlog', 'fish_table_alias'=>'ffa'));
    if( ! fbLib::addSecSQL($q,'b')){
      return 0;
    }
    $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
    return intval($rows[0]['b_blog_count']);
  }
  public function getBlogsBB($offset = 0){
    $count = $this->getBlogsBBCount();
    $recs = array();
    $ret = array('count_total' => $count, 'count' => 0, 'records' => $recs, 
		 'record_offset' => intval($offset),
		 'record_limit' => BlogTable::BLOG_RECORD_LIMIT);
    if($count){
      $q = Doctrine_Query::create()
	->select($this->sqlSelect())
	->from('Blog b')
	->innerJoin('b.User u')
	->orderBy('b.date_create DESC')
	->limit(BlogTable::BLOG_RECORD_LIMIT);
      fbLib::addBoundsSQL($q,'b');
      fbLib::addDateRangeSQL($q,'MONTH(b.date_blog)');
      fbLib::addSecSQL($q,'b');
      fbLib::addFishSQL($q, array('source'=>'b', 'fish_table'=>'FishForBlog', 'fish_table_alias'=>'ffa'));
      if($offset > 0){
	$q->offset($offset * BlogTable::BLOG_RECORD_LIMIT);
      }
      $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
      $reply = new fbBlogReply();
      $file = new fbBlogFile();
      $fish = new fbBlogFish();
      foreach($rows as $i => $row){
	$rec = $this->sqlRow($row);
	$rec['reply_count'] = $reply->replyCount($rec['id']);
	$rec['photo_count'] = $file->photoCount($rec['id']);
	$rec['fish_count'] = $fish->fishCount($rec['id']);
	$recs[] = $rec;
      }
      $ret['count'] = count($recs);
      $ret['records'] = $recs;
    }
    return $ret;
  }
  
  private function sqlSelect(){
    $sql = 'b.id,b.group_id,b.sec,b.lat,b.lon,UNIX_TIMESTAMP(b.date_create) AS uts,DATE_FORMAT(b.date_create,\'%c/%e/%y\') AS date_blog,DATE_FORMAT(b.date_create,\'%c/%e/%y @ %r\') AS date_time,YEAR(date_blog) AS byear,MONTH(date_blog) AS bmonth,DAY(date_blog) AS bday,b.caption,b.content,b.loc,b.url,b.url_caption,u.username,u.photo_id';
    return $sql;
  }

  private function sqlRow($row){
    $rec = array();
    $rec['id'] = intval($row['b_id']);
    $rec['group_id'] = intval($row['b_group_id']);
    $rec['sec'] = intval($row['b_sec']);
    $rec['lat'] = floatval($row['b_lat']);
    $rec['lon'] = floatval($row['b_lon']);
    $rec['date_blog'] = $row['b_date_blog'];
    $rec['date'] = $row['b_date_blog'];
    $rec['date_time'] = $row['b_date_time'];
    $rec['uts'] = intval($row['b_uts']);
    $rec['year'] = $row['b_byear'];
    $rec['month'] = $row['b_bmonth'];
    $rec['day'] = $row['b_bday'];
    $rec['loc'] = $row['b_loc'];
    $rec['location'] = $row['b_loc'];
    $rec['url'] = trim($row['b_url']);
    $rec['url_caption'] = $row['b_url_caption'];
    $rec['caption'] = $row['b_caption'];
    $rec['content'] = $row['b_content'];
    $rec['username'] = $row['u_username'];
    $rec['photo_id'] = $row['u_photo_id'];    
    $rec['fb_source'] = 'report';
    return $rec;
  }
  
  public function getBlogsBBGWCount(){
    $q = Doctrine_Query::create()
      ->select('COUNT(*) AS blog_count')
      ->from('Blog b')
      ->innerJoin('b.User u')
      ->where('b.sec = 1');
    fbLib::addBoundsSQL($q,'b');
    $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
    return intval($rows[0]['b_blog_count']);
  }
  public function getBlogsBBGW($p){
    if( ! $p['limit']){
      $p['limit'] = BlogTable::BLOG_RECORD_LIMIT;
    }
    if( ! $p['offset']){
      $p['offset'] = 0;
    }
    $count = $this->getBlogsBBGWCount();
    $recs = array();
    $ret = array('count_total' => $count, 'count' => 0, 'records' => $recs, 
		 'record_offset' => $p['offset'], 'record_limit' => $p['limit']);
    if($count){
      $q = Doctrine_Query::create()
	->select($this->sqlSelect())
	->from('Blog b')
	->innerJoin('b.User u')
	->where('b.sec = 1')
	->orderBy('b.date_create DESC');
      fbLib::addBoundsSQL($q,'b');
      if($p['offset'] > 0){
	$q->limit( (1 + $p['offset']) * $p['limit']);
      }else{
	$q->limit($p['limit']);
      }
      $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
      $reply = new fbBlogReply();
      $file = new fbBlogFile();
      $fish = new fbBlogFish();
      foreach($rows as $i => $row){
	$rec = $this->sqlRow($row);
	$rec['reply_count'] = $reply->replyCount($rec['id']);
	$rec['photo_count'] = $file->photoCount($rec['id']);
	$rec['fish_count'] = $fish->fishCount($rec['id']);
	$recs[] = $rec;
      }
      $ret['count'] = count($recs);
      $ret['records'] = $recs;
    }
    return $ret;
  }
  
  public function blogsByUserIdCount($user_id){
    $q = Doctrine_Query::create()
      ->select('COUNT(*) AS blog_count')
      ->from('Blog b')
      ->innerJoin('b.User u')
      ->where('b.user_id = ?',$user_id)
      ->andWhere('b.sec = 1');
    $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
    return intval($rows[0]['b_blog_count']);
  }
  public function blogsByUserId($p){
    $user_id = $p['user_id'];
    if( ! $p['limit']){
      $p['limit'] = BlogTable::BLOG_RECORD_LIMIT;
    }
    if( ! $p['offset']){
      $p['offset'] = 0;
    }
    $count = $this->blogsByUserIdCount($user_id);
    $recs = array();
    $ret = array('count_total' => $count, 'count' => 0, 'records' => $recs, 
		 'record_offset' => $p['offset'], 'record_limit' => $p['limit']);
    if($count){
      $q = Doctrine_Query::create()
	->select($this->sqlSelect())
	->from('Blog b')
	->innerJoin('b.User u')
	->where('b.user_id = ?',$user_id)
	->andWhere('b.sec = 1')
	->orderBy('b.date_create DESC');
      if($p['offset'] > 0){
	$q->limit( (1 + $p['offset']) * $p['limit']);
      }else{
	$q->limit($p['limit']);
      }
      $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
      $reply = new fbBlogReply();
      $file = new fbBlogFile();
      $fish = new fbBlogFish();
      foreach($rows as $i => $row){
	$rec = $this->sqlRow($row);
	$rec['reply_count'] = $reply->replyCount($rec['id']);
	$rec['photo_count'] = $file->photoCount($rec['id']);
	$rec['fish_count'] = $fish->fishCount($rec['id']);
	$recs[] = $rec;
      }
      $ret['count'] = count($recs);
      $ret['records'] = $recs;
    }
    return $ret;
  }
  
  public function blogsByGroupIdCount($group_id){
    $q = Doctrine_Query::create()
      ->select('COUNT(*) AS blog_count')
      ->from('Blog b')
      ->innerJoin('b.User u')
      ->innerJoin('b.UserGroup g')
      ->where('b.group_id = ?',$group_id)
      ->andWhere('b.sec = 1');
    $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
    return intval($rows[0]['b_blog_count']);
  }
  public function blogsByGroupId($p){
    $group_id = $p['group_id'];
    if( ! $p['limit']){
      $p['limit'] = BlogTable::BLOG_RECORD_LIMIT;
    }
    if( ! $p['offset']){
      $p['offset'] = 0;
    }
    $count = $this->blogsByGroupIdCount($group_id);
    $recs = array();
    $ret = array('count_total' => $count, 'count' => 0, 'records' => $recs, 
		 'record_offset' => $p['offset'], 'record_limit' => $p['limit']);
    if($count){
      $q = Doctrine_Query::create()
	->select($this->sqlSelect())
	->from('Blog b')
	->innerJoin('b.User u')
	->innerJoin('b.UserGroup g')
	->where('b.group_id = ?',$group_id)
	->andWhere('b.sec = 1')
	->orderBy('b.date_create DESC');
      if($p['offset'] > 0){
	$q->limit( (1 + $p['offset']) * $p['limit']);
      }else{
	$q->limit($p['limit']);
      }
      $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
      $reply = new fbBlogReply();
      $file = new fbBlogFile();
      $fish = new fbBlogFish();
      foreach($rows as $i => $row){
	$rec = $this->sqlRow($row);
	$rec['reply_count'] = $reply->replyCount($rec['id']);
	$rec['photo_count'] = $file->photoCount($rec['id']);
	$rec['fish_count'] = $fish->fishCount($rec['id']);
	$recs[] = $rec;
      }
      $ret['count'] = count($recs);
      $ret['records'] = $recs;
    }
    return $ret;
  }

  public function blogsByFishIdCount($fish_id){
    $q = Doctrine_Query::create()
      ->select('COUNT(*) AS blog_count')
      ->from('Blog b')
      ->innerJoin('b.User u')
      ->innerJoin('b.FishForBlog ffb')
      ->where('ffb.fish_id = ?',$fish_id)
      ->andWhere('b.sec = 1');
    $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
    return intval($rows[0]['b_blog_count']);
  }

  public function blogsByFishId($p){
    $fish_id = $p['fish_id'];
    if( ! $p['limit']){
      $p['limit'] = BlogTable::BLOG_RECORD_LIMIT;
    }
    if( ! $p['offset']){
      $p['offset'] = 0;
    }
    $count = $this->blogsByFishIdCount($fish_id);
    $recs = array();
    $ret = array('count_total' => $count, 'count' => 0, 'records' => $recs, 
		 'record_offset' => $p['offset'], 'record_limit' => $p['limit']);
    if($count){
      $q = Doctrine_Query::create()
	->select($this->sqlSelect())
	->from('Blog b')
	->innerJoin('b.User u')
	->innerJoin('b.FishForBlog ffb')
	->where('ffb.fish_id = ?',$fish_id)
	->andWhere('b.sec = 1')
	->orderBy('b.date_create DESC');
      if($p['offset'] > 0){
	$q->limit( (1 + $p['offset']) * $p['limit']);
      }else{
	$q->limit($p['limit']);
      }
      $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
      $reply = new fbBlogReply();
      $file = new fbBlogFile();
      $fish = new fbBlogFish();
      foreach($rows as $i => $row){
	$rec = $this->sqlRow($row);
	$rec['reply_count'] = $reply->replyCount($rec['id']);
	$rec['photo_count'] = $file->photoCount($rec['id']);
	$rec['fish_count'] = $fish->fishCount($rec['id']);
	$recs[] = $rec;
      }
      $ret['count'] = count($recs);
      $ret['records'] = $recs;
    }
    return $ret;
  }

  public function blogSearchCount($param){
    $q = Doctrine_Query::create()
      ->select('COUNT(*) AS blog_count')
      ->from('Blog b')
      ->innerJoin('b.User u');
    fbLib::addBoundsSQL($q,'b');
    fbLib::addDateRangeSQL($q,'MONTH(b.date_blog)');
    fbLib::addSearchSQL($q,$param);
    fbLib::addFishSQL($q, array('source'=>'b', 'fish_table'=>'FishForBlog', 'fish_table_alias'=>'ffa'));
    if( ! fbLib::addSecSQL($q,'b')){
      return 0;
    }
    $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
    return intval($rows[0]['b_blog_count']);
  }
  public function blogSearch($param,$offset = 0){
    $count = $this->blogSearchCount($param);
    $recs = array();
    $ret = array('count_total' => $count, 'count' => 0, 'records' => $recs, 
		 'record_offset' => intval($offset),
		 'record_limit' => BlogTable::BLOG_RECORD_LIMIT);
    if($count){
      $q = Doctrine_Query::create()
	->select($this->sqlSelect())
	->from('Blog b')
	->innerJoin('b.User u')
	->orderBy('b.date_create DESC')
	->limit(BlogTable::BLOG_RECORD_LIMIT);
      fbLib::addBoundsSQL($q,'b');
      fbLib::addDateRangeSQL($q,'MONTH(b.date_blog)');
      fbLib::addSecSQL($q,'b');
      fbLib::addSearchSQL($q,$param);
      fbLib::addFishSQL($q, array('source'=>'b', 'fish_table'=>'FishForBlog', 'fish_table_alias'=>'ffa'));
      if($offset > 0){
	$q->offset($offset * BlogTable::BLOG_RECORD_LIMIT);
      }
      $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
      $reply = new fbBlogReply();
      $file = new fbBlogFile();
      $fish = new fbBlogFish();
      foreach($rows as $i => $row){
	$rec = $this->sqlRow($row);
	$rec['reply_count'] = $reply->replyCount($rec['id']);
	$rec['photo_count'] = $file->photoCount($rec['id']);
	$rec['fish_count'] = $fish->fishCount($rec['id']);
	$recs[] = $rec;
      }
      $ret['count'] = count($recs);
      $ret['records'] = $recs;
    }
    return $ret;
  }
 
  public function getBlogsCount(){
    $q = Doctrine_Query::create()
      ->select('COUNT(*) AS blog_count')
      ->from('Blog b')
      ->innerJoin('b.User u');
    if( ! fbLib::addSecSQL($q,'b')){
      return 0;
    }
    $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
    return intval($rows[0]['b_blog_count']);
  }
  public function getBlogs($p){
    if( ! $p['limit']){
      $p['limit'] = BlogTable::BLOG_RECORD_LIMIT;
    }
    if( ! $p['offset']){
      $p['offset'] = 0;
    }
    $count = $this->getBlogsCount();
    $recs = array();
    $ret = array('count_total' => $count, 'count' => 0, 'records' => $recs, 
		 'record_offset' => intval($p['offset']),
		 'record_limit' => BlogTable::BLOG_RECORD_LIMIT);
    if($count){
      $q = Doctrine_Query::create()
	->select($this->sqlSelect())
	->from('Blog b')
	->innerJoin('b.User u')
	->orderBy('b.date_create DESC')
	->limit(BlogTable::BLOG_RECORD_LIMIT);
      fbLib::addSecSQL($q,'b');
      if($p['offset'] > 0){
	$q->offset($p['offset'] * BlogTable::BLOG_RECORD_LIMIT);
      }
      $rows = $q->execute(array(),Doctrine_Core::HYDRATE_SCALAR);
      $reply = new fbBlogReply();
      $file = new fbBlogFile();
      $fish = new fbBlogFish();
      foreach($rows as $i => $row){
	$rec = $this->sqlRow($row);
	$rec['reply_count'] = $reply->replyCount($rec['id']);
	$rec['photo_count'] = $file->photoCount($rec['id']);
	$rec['fish_count'] = $fish->fishCount($rec['id']);
	$recs[] = $rec;
      }
      $ret['count'] = count($recs);
      $ret['records'] = $recs;
    }
    return $ret;
  }
   
  public function deleteBlog($blog_id){
    if($blog_id){
      $q = Doctrine_Query::create()
	->delete()
	->from('Blog b')
	->where('b.id = ?', $blog_id);
      $q->execute();
      $this->deleteBlogPhotos($blog_id);
    }
  }
  
  private function deleteBlogPhotos($blog_id){
    if($blog_id){
      $q = Doctrine_Query::create()
	->delete()
	->from('FileForBlog ffb')
	->where('ffb.blog_id = ?', $blog_id);
      $q->execute();
    }
  }
    
  public function deletePhoto($blog_id,$file_id){
    $q = Doctrine_Query::create()
      ->delete()
      ->from('FileForBlog f')
      ->where('f.blog_id = ?',$blog_id)
      ->andWhere('f.file_id = ?',$file_id)
      ->execute();
  }
 
}